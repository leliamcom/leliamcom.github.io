{"data":{"author":{"avatar":{"url":"/assets/32x32_avatar.jpg"},"name":"Liam","slug":"nghenglim","tagline":"Make people great again!"},"banner":{"url":"/assets/2016022000.png"},"cover":{"url":"/assets/thumb-150-2016022000.png"},"data":"\n## Installation on Golang\nWe will use gvm to install go for the current user. Note that we need to use go1.4 to compile go1.5 because go1.5 use go itself as compiler, therefore it need to have go installed.\n\nNote that gvm is mainly for development use, IMHO using tar install or docker is a better way for production server.\n\n~~~ bash\nbash < <(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)\ngvm install go1.4\ngvm use go1.4\ngvm install go1.6\ngvm use go1.6 --default\n~~~\n\n## Gin-Gonic/Gin\nGin is a web framework written in Go (Golang). It features a martini-like API with much better performance, up to 40 times faster thanks to httprouter. If you need performance and good productivity, you will love Gin.\n\n~~~\ngo get github.com/gin-gonic/gin\n~~~\n\n~~~ go\n#~/golang/server.go\npackage main\n\nimport \"github.com/gin-gonic/gin\"\n\nfunc main() {\n    r := gin.Default()\n    r.GET(\"/ping\", func(c *gin.Context) {\n        c.JSON(200, gin.H{\n            \"message\": \"pong\",\n        })\n    })\n    r.Run() // listen and server on 0.0.0.0:8080\n}\n~~~\n\nand execute it with `go run server.go`, access localhost:8080/ping and you should be able to see `{\"message\":\"pong\"}`\n\n## Live Reloading with codegangsta/gin\nHowever for development, it is important to have compile on files changed function. There is a package there for go. Note that do not start any app on proxy port that is used by gin (default 3000) and the application port.\n\nRunning below code will autostart the go app.\n\n~~~ bash\ngo get github.com/codegangsta/gin\ncd ~/golang/\ngin -i -a 8080\n~~~\n\nnow change the code without terminating gin\n\n~~~ bash\n#~/golang/server.go\npackage main\n\nimport \"github.com/gin-gonic/gin\"\n\nfunc main() {\n    r := gin.Default()\n    r.GET(\"/ping\", func(c *gin.Context) {\n        c.JSON(200, gin.H{\n            \"message\": \"pong pong\",\n        })\n    })\n    r.Run() // listen and server on 0.0.0.0:8080\n}\n~~~\n\naccess to localhost:8080/ping and you should be able to see `{\"message\":\"pong pong\"}`\n\n## This is It\nWith this, we have successfully setup a simple golang rest api server. Golang is a promising solution to give both near C performance + dynamic language development speed + goroutine.\n    ","description":"\nWe will use gvm to install go for the current user. Note that we need to use go1.4 to compile go1.5 because go1.5 use go itself as compiler, therefore it need to have go installed.\n\nNote that gvm is mainly for development use, IMHO using tar install or docker is a better way for production server.\n    ","id":"6fcf516c-2337-486e-a7bf-c580aa4ab417","postedAt":"2016-02-19T16:00:00.000Z","shortener":"3oYTmlWx3QBUng4ZzKdm5N","slug":"golang-rest-api","tags":["golang"],"title":"Golang Rest API","typeCode":1}}