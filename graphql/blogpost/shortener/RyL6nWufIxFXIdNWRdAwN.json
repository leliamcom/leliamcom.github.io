{"author":{"avatar":"/assets/32x32_avatar.jpg","name":"Liam","tagline":"Make people great again!"},"data":"The story begins in one day, I want to make NodeJS API endpoints like\n\n`GET /api/blogposts?fields=author{name,avatar},title,detail`\n\nand it should return me\n~~~js\n[{\n    \"author\": {\n        \"name\": \"Liam Ng\",\n        \"avatar\": \"https://someurl\",\n    },\n    \"title\": \"blogpost title\",\n    \"detail\": \"blogpost detail\"\n}]\n~~~\n\nWhen using GraphQL, partial response is a build in tool. However sometimes REST is a more suitable use case.\n\nSearching the web, I do find some libraries that do similar things however the feature is somewhat limited. Developers should not be in situation that \n1. want to implement partial response \n2. not so supported in REST\n3. use GraphQL\n\nInstead, REST should be able to achieve it as easily, with a library.\n\n## Things to acknowledge\n- Graphql still provide you a better way to do concurrent GET request (though the code might get complicated on retry on partial error)\n- It should be build with somethings like swagger to let user knows available fields (it do comes with handy function to return response schema in OpenAPI 3 format)\n\n## Introduce partial-responsify\ntl;dr: you can find the code at [github](https://github.com/nghenglim/partial-responsify)\n\nUsing it should be simple\n~~~js\nimport { PartialResponsify, ResponseFormat } from \"partial-responsify\";\n\n// ideally should be inside DI\nconst pr = new PartialResponsify();\n\n// it is normally inside ctx.query for Koa\n// default don't support whitespace or - or _\n// (normally should be camelcase?)\nconst fields = \"name,coords,author{name{first}}\";\nconst responseFormat: ResponseFormat = {\n    fields: {\n        author: {\n            fields: {\n                name: {\n                    fields: {\n                        first: {\n                            type: \"string\",\n                        },\n                        last: {\n                            type: \"string\",\n                        },\n                    },\n                    type: \"object\",\n                },\n            },\n            type: \"object\",\n        },\n        coords: {\n            items: {\n                items: {\n                    type: \"number\",\n                },\n                type: \"array\",\n            },\n            type: \"array\",\n        },\n        license: {\n            type: \"string\",\n        },\n        name: {\n            type: \"string\",\n        },\n    },\n    type: \"object\",\n};\n\n// you can use this fieldsToParse to track the fields usage\nconst fieldsToParse = pr.parseFields(fields, responseFormat);\nconsole.log(fieldsToParse);\n\n// and then you perform some logic and got the result\nconst result = {\n    author: {\n        name: {\n            first: \"Liam\",\n            last: \"Ng\",\n        },\n        url: \"https://www.leliam.com\",\n    },\n    coords: [[13.37, 1.337], [0, 0]],\n    license: \"MIT\",\n    name: \"partial-responsify\",\n};\nconst res = pr.parseResult<any>(fieldsToParse, responseFormat, result);\nconsole.log(res);\n/*\nthe result should be:\n[ [ [], 'name' ],\n  [ [], 'coords' ],\n  [ [ 'author', 'name' ], 'first' ] ]\n{ author: { name: { first: 'Liam' } },\n  coords: [ [ 13.37, 1.337 ], [ 0, 0 ] ],\n  name: 'partial-responsify' }\n*/\n~~~\n\nSince we use `responseFormat` to validate the response, it will be great if there is a function to generate swagger response schema based on it!\n~~~js\nimport { ResponseFormat, SchemaGenerator } from \"partial-responsify\";\nconst sgen = new SchemaGenerator();\nconst responseFormat: ResponseFormat = {\n    items: {\n        fields: {\n            a: {\n                type: \"number\",\n            },\n            b: {\n                type: \"string\",\n            },\n            c: {\n                type: \"integer\",\n            },\n            d: {\n                format: \"uuid\",\n                type: \"string\",\n            },\n            e: {\n                fields: {\n                    a: {\n                        type: \"number\",\n                    },\n                },\n                type: \"object\",\n            },\n        },\n        type: \"object\",\n    },\n    type: \"array\",\n};\nconst result = sgen.generate(responseFormat);\nconsole.log(result);\n/*\n{\n    items: {\n        properties: {\n            a: {\n                type: \"number\",\n            },\n            b: {\n                type: \"string\",\n            },\n            c: {\n                type: \"integer\",\n            },\n            d: {\n                format: \"uuid\",\n                type: \"string\",\n            },\n            e: {\n                properties: {\n                    a: {\n                        type: \"number\",\n                    },\n                },\n                type: \"object\",\n            },\n        },\n        type: \"object\",\n    },\n    type: \"array\",\n}\n*/\n~~~\n\n## To make it better\nIt will require a library to auto generate Swagger JSON file to make it shine. It is not hard to make the library however will be large amount of works to support every edge case.","description":"The story begins in one day, I want to make NodeJS API endpoints like\n\n`GET /api/blogposts?fields=author{name,avatar},title,detail`\n\nand it should return me\n~~~js\n[{\n    \"author\": {\n        \"name\": \"Liam Ng\",\n        \"avatar\": \"https://someurl\",\n    },\n    \"title\": \"blogpost title\",\n    \"detail\": \"blogpost detail\"\n}]\n~~~","id":"1c62698f-da2a-4c6c-8c8f-fc555cdfbee9","bannerUrl":"/assets/2018103000.png","coverUrl":"/assets/2018103000.png","postedAt":"2018-10-30T12:00:00.000Z","slug":"make-rest-api-to-partial-response-just-like-graphql-@bRyL6nWufIxFXIdNWRdAwN","tags":["nodejs","opensource","typescript"],"title":"Make REST api to partial response, just like GraphQL","typeCode":1}