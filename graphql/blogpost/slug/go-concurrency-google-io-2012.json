{"author":{"avatar":"/assets/32x32_avatar.jpg","name":"Liam","tagline":"Make people great again!"},"data":"\nConcurrency is the key to designing high performance network services. Go's concurrency primitives (goroutines and channels) provide a simple and efficient means of expressing concurrent execution. [In this talk we see how tricky concurrency problems can be solved gracefully with simple Go code.](https://www.youtube.com/watch?v=f6kdp27TYZs)\n\n## Some Notes\n- Concurrency is not parallelism\n  - Go support concurrency across multiple cpu cores, which is called parallelism\n- Example of running the search function to search web,image and video concurrently\n  - with no lock, no condition variable and no callbacks\n  - with ability to limite maximum wait time, and return the searched result among web, image and video.\n- The video used Go's concurrency primitives to convert\n  - from slow, sequential and failure sensitive program\n  - to fast, concurrent, replicated and robust program\n\n    ","description":"\nConcurrency is the key to designing high performance network services. Go's concurrency primitives (goroutines and channels) provide a simple and efficient means of expressing concurrent execution. [In this talk we see how tricky concurrency problems can be solved gracefully with simple Go code.](https://www.youtube.com/watch?v=f6kdp27TYZs)\n    ","id":"5b161f95-f62d-4e31-976a-ee6a5a69ff20","bannerUrl":"/assets/2015091900.jpg","coverUrl":"/assets/thumb-150-2015091900.jpg","postedAt":"2015-09-25T16:00:00.000Z","tags":["golang"],"title":"Go Concurrency (Google IO 2012)","typeCode":1}