{"author":{"avatar":"/assets/32x32_avatar.jpg","name":"Liam","tagline":"Make people great again!"},"data":"\n## Edit on year Jun 19, 2018\nProject has been discontinued due to Rust still does not support Async/Await which i think is crucial for web development\n\n## Intro\nIf you ask what is the rising star of programming language, it will be rust for recent year.\n\n## Potential of Rust in Web Development\n- Execution Speed\n- No garbage collection (as compared to JAVA or GO web development)\n- Build in code safety\n- Compile to binary\n\n## Is 2018 the right time to use Rust for web development?\nWith the asynchronous I/O libraries of Rust is mostly ready, Rust can  serve web traffic without being I/O bound. However, the only downside is that framework is not mature yet.\n\n## Top Web Development Framework For Rust\n- Iron: Not much investigate into it, but seems like not as maintained as Rocket\n- Rocket: Currently(0.3.6) is build on synchronous HTTP backend. Provide higher level of abstraction however has less control on what you can do.\n- Hyper: Hyper(0.11) is multithreaded asynchronous low-level typesafe abstraction over raw HTTP. However the example on it is not much and too low-level.\n\n## Time for Develop a new Framework?\nWell I actually think making a wrapper on top of Hyper will be good enough! I currently name it as [Hyperap](https://github.com/nghenglim/hyperap) and published it to [Github](https://github.com/nghenglim/hyperap)! Have not publish to crates.io yet because I have some issue login into it.\n\nThe code is still in development, I plan to use it as the main framework for my pet project.\n\n## Example Usage\nTo test it (assumed you have rust cargo installed)\n~~~bash\ngit clone https://github.com/nghenglim/hyperap\ncd hyperap && cargo run\n~~~\n~~~rs\nextern crate hyperap;\nuse hyperap::hyper::server::{Response};\nuse hyperap::hyper::{Method};\nuse hyperap::server::{HyperApp, Middleware, MiddlewareParam};\nuse hyperap::response::{resp};\n\nfn get_static(_a: MiddlewareResult) -> Response {\n    hyperap::server::static_file(\"Cargo.toml\")\n}\nfn hello_world(a: MiddlewareResult) -> Response {\n    resp(a.hello.clone() + \" at path \" + &a.path)\n}\nfn not_found_route(a: MiddlewareResult) -> Response {\n    resp(\"not found route at path \".to_owned() + &a.path)\n}\npub struct App {\n    pub hello: String,\n}\npub struct MiddlewareResult {\n    path: String,\n    pub hello: String,\n}\n#[derive(Clone)]\npub struct RouteDefinition {\n    parameters: Vec<RouteDefinitionParameters>\n}\n#[derive(Clone)]\npub struct RouteDefinitionParameters {\n    _in: String,\n    _name: String,\n}\nimpl Middleware for App {\n    type M = MiddlewareResult;\n    type R = RouteDefinition;\n    fn middleware(&self, p: MiddlewareParam<MiddlewareResult, Self::R>) -> Response {\n        let m = MiddlewareResult {\n            path: p.req.path().to_owned(),\n            hello: self.hello.clone(),\n        };\n        (p.func)(m)\n    }\n}\nfn main() {\n    let the_app = App {\n        hello: \"Hello World\".to_owned(),\n    };\n    let mut app = HyperApp::new(the_app);\n    app.open_browser(true);\n    app.set_default_route(not_found_route);\n    app.add_route(Method::Get, \"/static\", get_static, vec![RouteDefinition {\n        parameters: vec![RouteDefinitionParameters {\n            _in: \"query\".to_owned(),\n            _name: \"offset\".to_owned(),\n        }]\n    }]);\n    app.add_pure_route(Method::Get, \"/\", hello_world);\n    app.port(3000);\n    app.run();\n}\n~~~\n\n## Other critical part in web development\n- ORM: with feature similar to [Sequelize](https://github.com/sequelize/sequelize)\n- Query builder\nThere seems to be some libraries for it, however coming from NodeJS, the feature that these libraries just cannot fulfill my need.\n\nI'm currently working on making a rust ORM library. However most probably will remain as my private repo unless a lot of people interested on it.\n    ","description":"\nWith the asynchronous I/O libraries of Rust is mostly ready, Rust can  serve web traffic without being I/O bound. However, the only downside is that framework is not mature yet.\n\n### Edit on year Jun 19, 2018\nProject has been discontinued due to Rust still does not support Async/Await which i think is crucial for web development\n    ","id":"48d6b7ea-f022-4f6c-9da7-0dc371a6f208","bannerUrl":null,"coverUrl":null,"postedAt":"2018-01-31T16:00:00.000Z","tags":["rust","opensource"],"title":"Rust For Web Development Part 1","typeCode":1}