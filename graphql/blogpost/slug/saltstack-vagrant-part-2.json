{"author":{"avatar":"/assets/32x32_avatar.jpg","name":"Liam","tagline":"Make people great again!"},"data":"\nLast week we talked about creating a simple httpd service when we spin up our vagrant VM. This week I will continue to talk more about Salt.\n\n## Inside The Vagrant Virtual Machine\nSalt run in `/srv/` folder in our VM. Therefore our folder structure in virtual machine will look like this.\n\n~~~\n- /srv/\n  - pillar/  # Unlike state tree, pillar data is only available for the targeted minion specified by the matcher type.\n  - salt/  # All the configuration for the minion to run\n- /etc/salt/\n    - minion  #minion configuration\n    - master  #master configuration\n~~~\n\n## Running in Master-less vs Master mode\n- Master-less mode\n\n~~~\nsalt-call --local state.highstate\n~~~\n- Master mode: salt-minion need to accept the salt-key first\n\n~~~\nsalt '*' state.highstate\n~~~\n\nFor running vagrant, we use master-less mode, the different between master mode and master-less mode shouldn't be large.\n\n## Objective\nTo create user(s) base on pillar files, uninstall httpd and install nginx\n\n## Coding\n- Vagrantfile: mount the desired folder to your VM\n\n~~~\nconfig.vm.synced_folder \"salt/root/\", \"/srv/salt/\"\nconfig.vm.synced_folder \"salt/pillar/\", \"/srv/pillar/\"\n~~~\n- /srv/pillar/users/init.sls: Sensitive user data\n\n~~~ rb\nusers:\n    henglim.ng:\n        uid: 1000\n        fullname: Heng Lim Ng\n        groups:\n            - wheel\n~~~\n- /srv/pillar/top.sls: Include any new pillar data here\n\n~~~ rb\nbase:\n  '*':\n    - users\n~~~\n- /srv/salt/top.sls: the list of action we want to perform in env 'base', according to our objective\n\n~~~ rb\nbase:\n  '*':\n    - httpd.absent\n    - user\n    - nginx\n~~~\n- /srv/salt/user/init.sls: make use of our pillar users\n\n~~~ rb\n{% raw %}\n{% for username, user in pillar.get('users', {}).items() %}\n{{username}}:\n  user.present:\n    - fullname: {{user.fullname}}\n    - shell: /bin/bash\n    - home: /home/{{username}}\n    - groups: {{user.groups}}\n{% endfor %}\n{% endraw %}\n~~~\n- /srv/salt/httpd/absent.sls: make sure we uninstalled the httpd that we have installed\n\n~~~ rb\nhttpd:               # ID declaration\n  pkg.removed: []\n\n/var/www/html/index.html:\n  file.absent: []\n~~~\n- /srv/salt/nginx/init.sls: yum search for `nginx`, if found, install `nginx` and enable it.\n\n~~~ rb\nnginx:               # ID declaration\n  pkg.installed: []\n  service.running:\n    - enable: True\n~~~\n\n## To Be Continue\nIn this post I mainly described how to make use of pillar to manage our VM user, uninstalling and installing of services using yum packages. Stay tuned for the SaltStack Vagrant Part 3.\n    ","description":"\nLast week we talked about creating a simple httpd service when we spin up our vagrant VM. This week I will continue to talk more about Salt.\n    ","id":"4747abc1-870a-4080-b748-39ea5a03a8d2","bannerUrl":"/assets/2016011600.png","coverUrl":"/assets/thumb-150-2016011600.png","postedAt":"2016-01-22T16:00:00.000Z","tags":["salt","configuration-management","vagrant"],"title":"SaltStack Vagrant Part 2","typeCode":1}