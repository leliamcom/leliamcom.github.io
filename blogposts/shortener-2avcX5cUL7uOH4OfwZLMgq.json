{"slug":"saltstack-vagrant-part-2-@2avcX5cUL7uOH4OfwZLMgq","title":"SaltStack Vagrant Part 2","description":"<p>Last week we talked about creating a simple httpd service when we spin up our vagrant VM. This week I will continue to talk more about Salt.</p>\n","banner":"/assets/2016011600.png","author":{"avatar":"/assets/32x32_avatar.jpg","name":"Liam"},"data":"<p>Last week we talked about creating a simple httpd service when we spin up our vagrant VM. This week I will continue to talk more about Salt.</p>\n<h2>Inside The Vagrant Virtual Machine</h2>\n<p>Salt run in <code>/srv/</code> folder in our VM. Therefore our folder structure in virtual machine will look like this.</p>\n<pre class=\"hljs\"><code>- /srv/\n  - pillar/  # Unlike state tree, pillar data is only available for the targeted minion specified by the matcher type.\n  - salt/  # All the configuration for the minion to run\n- /etc/salt/\n    - minion  #minion configuration\n    - master  #master configuration\n</code></pre>\n<h2>Running in Master-less vs Master mode</h2>\n<ul>\n<li>Master-less mode</li>\n</ul>\n<pre class=\"hljs\"><code>salt-call --local state.highstate\n</code></pre>\n<ul>\n<li>Master mode: salt-minion need to accept the salt-key first</li>\n</ul>\n<pre class=\"hljs\"><code>salt '*' state.highstate\n</code></pre>\n<p>For running vagrant, we use master-less mode, the different between master mode and master-less mode shouldn't be large.</p>\n<h2>Objective</h2>\n<p>To create user(s) base on pillar files, uninstall httpd and install nginx</p>\n<h2>Coding</h2>\n<ul>\n<li>Vagrantfile: mount the desired folder to your VM</li>\n</ul>\n<pre class=\"hljs\"><code>config.vm.synced_folder &quot;salt/root/&quot;, &quot;/srv/salt/&quot;\nconfig.vm.synced_folder &quot;salt/pillar/&quot;, &quot;/srv/pillar/&quot;\n</code></pre>\n<ul>\n<li>/srv/pillar/users/init.sls: Sensitive user data</li>\n</ul>\n<pre class=\"hljs\"><code>users:\n    henglim.ng:\n        uid: 1000\n        fullname: Heng Lim Ng\n        groups:\n            - wheel\n</code></pre>\n<ul>\n<li>/srv/pillar/top.sls: Include any new pillar data here</li>\n</ul>\n<pre class=\"hljs\"><code>base:\n  '*':\n    - users\n</code></pre>\n<ul>\n<li>/srv/salt/top.sls: the list of action we want to perform in env 'base', according to our objective</li>\n</ul>\n<pre class=\"hljs\"><code>base:\n  '*':\n    - httpd.absent\n    - user\n    - nginx\n</code></pre>\n<ul>\n<li>/srv/salt/user/init.sls: make use of our pillar users</li>\n</ul>\n<pre class=\"hljs\"><code>{% raw %}\n{% for username, user in pillar.get('users', {}).items() %}\n{{username}}:\n  user.present:\n    - fullname: {{user.fullname}}\n    - shell: /bin/bash\n    - home: /home/{{username}}\n    - groups: {{user.groups}}\n{% endfor %}\n{% endraw %}\n</code></pre>\n<ul>\n<li>/srv/salt/httpd/absent.sls: make sure we uninstalled the httpd that we have installed</li>\n</ul>\n<pre class=\"hljs\"><code>httpd:               # ID declaration\n  pkg.removed: []\n\n/var/www/html/index.html:\n  file.absent: []\n</code></pre>\n<ul>\n<li>/srv/salt/nginx/init.sls: yum search for <code>nginx</code>, if found, install <code>nginx</code> and enable it.</li>\n</ul>\n<pre class=\"hljs\"><code>nginx:               # ID declaration\n  pkg.installed: []\n  service.running:\n    - enable: True\n</code></pre>\n<h2>To Be Continue</h2>\n<p>In this post I mainly described how to make use of pillar to manage our VM user, uninstalling and installing of services using yum packages. Stay tuned for the SaltStack Vagrant Part 3.</p>\n","postedAt":"23 Jan, 2016","metaDescription":"Last week we talked about creating a simple httpd service when we spin up our vagrant VM. This week I will continue to talk more about Salt.\n"}