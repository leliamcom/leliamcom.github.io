{"slug":"rewriting-the-blog-in-sveltejs-sapper-@7jnR89DGyH1tRLdznWMTTN","title":"Rewriting the blog in sveltejs sapper","description":"<p>In my <a href=\"https://www.leliam.com/blogposts/angular-is-great-again-making-ssr-app-with-high-performance-in-google-lighthouse-@b5Ypgkc83siF9W3A4SDPsac\">previous blogpost</a> I had written on how I create a SSR app in angular. The result is quite good, however the bundle size is still quite big due to angular runtime, and the performance score in lighthouse is only 91/100, which can still be improved.</p>\n<p>To solve this, I will have to rewrite it in <a href=\"https://svelte.dev/\">SvelteJS</a>, which shift a lot of work during compile time instead of browser, and surgically updates the DOM when the state of your app changes.</p>\n","banner":"/assets/svelte.png","author":{"avatar":"/assets/32x32_avatar.jpg","name":"Liam"},"data":"<h2>Rewriting the blog in sveltejs sapper</h2>\n<p>In my <a href=\"https://www.leliam.com/blogposts/angular-is-great-again-making-ssr-app-with-high-performance-in-google-lighthouse-@b5Ypgkc83siF9W3A4SDPsac\">previous blogpost</a> I had written on how I create a SSR app in angular. The result is quite good, however the bundle size is still quite big due to angular runtime, and the performance score in lighthouse is only 91/100, which can still be improved.</p>\n<p>To solve this, I will have to rewrite it in <a href=\"https://svelte.dev/\">SvelteJS</a>, which shift a lot of work during compile time instead of browser, and surgically updates the DOM when the state of your app changes.</p>\n<h2>Compare to previous</h2>\n<ul>\n<li>Angular frontend: will be replaced svelteJS</li>\n<li>Material Design: replaced with Bulma CSS for lower size</li>\n<li>Koa backend: will be removed as I'm not really hosting it as something like wordpress</li>\n<li>Minio as document backend: will be removed as I'm not really hosting it as something like wordpress</li>\n<li>fancy things like hero video: removed to save user bandwidth</li>\n</ul>\n<h2>End Result</h2>\n<p>Now I write the blog directly in git repo, just like how I used to do it in Jekyll.</p>\n<p>And the development and compiling is really easy, below are part of my package.json, by running <code>npm run export</code>, I already generated folder that I can upload to my github page.</p>\n<pre class=\"hljs\"><code>&quot;dev&quot;: &quot;HOST=localhost PORT=8080 sapper dev&quot;,\n&quot;build&quot;: &quot;sapper build --legacy&quot;,\n&quot;export&quot;: &quot;sapper export --legacy&quot;,\n</code></pre>\n<h2>The Performance</h2>\n<p>To test the performance locally, I have written a simple server to mimic github page behavior. Below is the performace result during the time I written this blogpost.</p>\n<p>Note that the performance(93) will be improved once I host it in github page due to http/2.</p>\n<ul>\n<li>lighthouse audit desktop simulated 4g 4x cpu slowdown <img src=\"/assets/20191231_performance_lighthouse_desktop_simulated_slow_4g_4x_cpu_slowdown.png\" alt=\"20191231_performance_lighthouse_desktop_simulated_slow_4g_4x_cpu_slowdown\" loading=\"lazy\"></li>\n<li>lighthouse audit mobile simulated 4g 4x cpu slowdown <img src=\"/assets/20191231_performance_lighthouse_mobile_simulated_slow_4g_4x_cpu_slowdown.png\" alt=\"20191231_performance_lighthouse_mobile_simulated_slow_4g_4x_cpu_slowdown\" loading=\"lazy\"></li>\n</ul>\n<h3>Metrics in homepage</h3>\n<ul>\n<li>CSS: 19.05 KB transferred (mainly from bulma css)</li>\n<li>JS: 16.35 KB transferred</li>\n<li>HTML: 4.98 KB transferred</li>\n<li>FONT: 22.71 KB transferred\n<img src=\"/assets/20190102_resource_all.png\" alt=\"20190102_resource_all\" loading=\"lazy\"></li>\n</ul>\n<h2>Conclusion</h2>\n<p>I'm quite happy with the current setup.</p>\n<ul>\n<li>Compare with Angular SSR, the performance is a lot better and the bundler size is a lot smaller.</li>\n<li>Compare with Jekyll, the github page feels like a SPA and able to use a lot of frontend component with npm + rollup</li>\n</ul>\n","postedAt":"02 Jan, 2020","metaDescription":"In my previous blogpost I had written on how I create a SSR app in angular. The result is quite good, however the bundle size is still quite big due to angular runtime, and the performance score in lighthouse is only 91/100, which can still be improved.\nTo solve this, I will have to rewrite it in SvelteJS, which shift a lot of work during compile time instead of browser, and surgically updates the DOM when the state of your app changes.\n"}