{"slug":"postgresql-vs-mariadb-mysql-2015-@4WsWDM0SAS0w7wTYxKqDyu","title":"PostgreSQL vs MariaDB(MySQL) 2015","description":"<p>So recently I want to find benchmark for RDBMS between MySQL/MariaDB and PostgreSQL. To my surprise, most benchmark result is outdated, therefore I have decided to benchmark them, using MariaDB(MySQL) [10.0.22(5.6.26)] vs PostgreSQL [9.2.14]</p>\n","banner":"/assets/2015121900.jpg","author":{"avatar":"/assets/32x32_avatar.jpg","name":"Liam"},"data":"<p><img src=\"/assets/2015121901.png\" alt=\"Postgres vs Mysql\" title=\"Postgres vs Mysql\" loading=\"lazy\"></p>\n<h2>Important Notice (13 Feb 2016)</h2>\n<p>When using pgadmin, the execution time at status bar is including data transfer time, unfortunately, I am using pgadmin status bar execution time to compare with MySQL server execution time which is unfair. I will update the correct benchmark soon.</p>\n<p>Please Refer to <a href=\"https://www.leliam.com/postgresql-9.5.0-vs-mariadb-10.1.11-vs-mysql-5.7.0-year-2016\">updated benchmark on postgres vs mysql vs mariadb</a></p>\n<h2>Choosing RDBMS</h2>\n<p>So recently I want to find benchmark for RDBMS between MySQL/MariaDB and PostgreSQL. To my surprise, most benchmark result is outdated, therefore I have decided to benchmark them, using MariaDB(MySQL) [10.0.22(5.6.26)] vs PostgreSQL [9.2.14]</p>\n<h2>How to Benchmark</h2>\n<ol>\n<li>Using similar table structure: located at {db}.sql</li>\n<li>Use python script to generate sql insert data</li>\n<li>Open sqlyog to benchmark MariaDB(MySQL)</li>\n<li>Open pgAdmin to benchmark PostgreSQL</li>\n<li>All setting are using default: setting related file can be found at {benchmark_folder}/{db}_config.txt</li>\n</ol>\n<p>You can find the detail at <a href=\"https://github.com/nghenglim/database_benchmark\">my Repo</a></p>\n<h2>Result</h2>\n<ul>\n<li>\n<p>mariadb(mysql) write (10000 rows): from insert.sql, run 10x time accumulate to 100000 rows</p>\n<ol>\n<li>0.281s</li>\n<li>0.131s</li>\n<li>0.165s</li>\n<li>0.146s</li>\n<li>0.248s</li>\n<li>0.141s</li>\n<li>0.136s</li>\n<li>0.208s</li>\n<li>0.157s</li>\n<li>0.155s</li>\n</ol>\n</li>\n<li>\n<p>postgresql write (10000 rows):</p>\n<ol>\n<li>0.227s</li>\n<li>0.256s</li>\n<li>0.215s</li>\n<li>0.227s</li>\n<li>0.194s</li>\n<li>0.195s</li>\n<li>0.203s</li>\n<li>0.205s</li>\n<li>0.174</li>\n<li>0.182s</li>\n</ol>\n</li>\n</ul>\n<p>simple query: taking average of multiple time query</p>\n<ol>\n<li>\n<p><code>SELECT * FROM testing LIMIT 1000</code></p>\n<ul>\n<li>mariadb(mysql):0.007s</li>\n<li>postgresql: 0.045s</li>\n</ul>\n</li>\n<li>\n<p><code>SELECT * FROM testing WHERE int_col &gt; 5000 LIMIT 1000</code></p>\n<ul>\n<li>mariadb(mysql):0.007s</li>\n<li>postgresql: 0.045s</li>\n</ul>\n</li>\n<li>\n<p><code>SELECT * FROM testing WHERE int_col + int_col2 &gt; 12345</code></p>\n<ul>\n<li>mariadb(mysql): 0.008s</li>\n<li>postgresql: 0.045s</li>\n</ul>\n</li>\n<li>\n<p><code>SELECT COUNT(*) FROM testing WHERE int_col + int_col2 &gt; 12345</code></p>\n<ul>\n<li>mariadb(mysql): 0.040s</li>\n<li>postgresql: 0.021s</li>\n</ul>\n</li>\n<li>\n<p><code>SELECT * FROM testing WHERE int_col &gt; 5000 ORDER BY word_col ASC LIMIT 1000</code></p>\n<ul>\n<li>mariadb(mysql): 0.106s</li>\n<li>postgresql: 0.093s</li>\n</ul>\n</li>\n<li>\n<p><code>SELECT * FROM testing WHERE word_col LIKE '%lim%' ORDER BY word_col DESC LIMIT 1000</code></p>\n<ul>\n<li>mariadb(mysql): 0.093s</li>\n<li>postgresql: 0.058s</li>\n</ul>\n</li>\n</ol>\n<h2>Conclusion</h2>\n<p>MariaDB(MySQL) is good at dead simple query, however PostgreSQL is good at more complicated query.</p>\n<p>For real world scenario, it will more likely has a lot of complicated query, therefore its better to choose PostgreSQL for it - provided that PostgreSQL comes with lots of useful feature that MySQL lack of.</p>\n","postedAt":"19 Dec, 2015","metaDescription":"So recently I want to find benchmark for RDBMS between MySQL/MariaDB and PostgreSQL. To my surprise, most benchmark result is outdated, therefore I have decided to benchmark them, using MariaDB(MySQL) [10.0.22(5.6.26)] vs PostgreSQL [9.2.14]\n"}