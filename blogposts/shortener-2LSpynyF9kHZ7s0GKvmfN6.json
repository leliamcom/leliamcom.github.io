{"slug":"go-concurrency-google-io-2012-@2LSpynyF9kHZ7s0GKvmfN6","title":"Go Concurrency (Google IO 2012)","description":"<p>Concurrency is the key to designing high performance network services. Go's concurrency primitives (goroutines and channels) provide a simple and efficient means of expressing concurrent execution. <a href=\"https://www.youtube.com/watch?v=f6kdp27TYZs\">In this talk we see how tricky concurrency problems can be solved gracefully with simple Go code.</a></p>\n","banner":"/assets/2015091900.jpg","author":{"avatar":"/assets/32x32_avatar.jpg","name":"Liam"},"data":"<p>Concurrency is the key to designing high performance network services. Go's concurrency primitives (goroutines and channels) provide a simple and efficient means of expressing concurrent execution. <a href=\"https://www.youtube.com/watch?v=f6kdp27TYZs\">In this talk we see how tricky concurrency problems can be solved gracefully with simple Go code.</a></p>\n<h2>Some Notes</h2>\n<ul>\n<li>Concurrency is not parallelism\n<ul>\n<li>Go support concurrency across multiple cpu cores, which is called parallelism</li>\n</ul>\n</li>\n<li>Example of running the search function to search web,image and video concurrently\n<ul>\n<li>with no lock, no condition variable and no callbacks</li>\n<li>with ability to limite maximum wait time, and return the searched result among web, image and video.</li>\n</ul>\n</li>\n<li>The video used Go's concurrency primitives to convert\n<ul>\n<li>from slow, sequential and failure sensitive program</li>\n<li>to fast, concurrent, replicated and robust program</li>\n</ul>\n</li>\n</ul>\n","postedAt":"26 Sep, 2015","metaDescription":"Concurrency is the key to designing high performance network services. Go's concurrency primitives (goroutines and channels) provide a simple and efficient means of expressing concurrent execution. In this talk we see how tricky concurrency problems can be solved gracefully with simple Go code.\n"}