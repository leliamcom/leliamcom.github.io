{"slug":"kaggle-titanic-challenge-with-julia-commentary-@3PPuf8eDy956CI37u1wneN","title":"Kaggle titanic challenge with Julia commentary","description":"<p>Recently Julia is on the trend, due to its purpose of becoming an easy-to-use scripting language, while giving near to C performance speed. I always see it as combination of Python + R + C, while some might think it as Python + Matlab + C</p>\n","banner":"/assets/2015103100.png","author":{"avatar":"/assets/32x32_avatar.jpg","name":"Liam"},"data":"<p><a href=\"https://www.kaggle.com/c/titanic\">Kaggle titanic challenge</a> is a famous knowledge competition which many new Kaggler will try their\nfirst Kaggle competition. Below commentary will be based on the <a href=\"http://nbviewer.ipython.org/gist/kanhua/eba1bac946bab4d89670\">nbviewer</a>.</p>\n<h2>FYI</h2>\n<ul>\n<li><a href=\"http://julialang.org/downloads/\">Julia Installation</a></li>\n<li><a href=\"http://jupyter.readthedocs.org/en/latest/install.html\">Jupyter Installation</a></li>\n</ul>\n<p>There are also jupyter docker out there, it will be suitable if there are no GPU involved in your machine learning application.</p>\n<p>Recently Julia is on the trend, due to its purpose of becoming an easy-to-use scripting language, while giving near to C performance speed. I always see it as combination of Python + R + C, while some might think it as Python + Matlab + C</p>\n<h2>Commentary</h2>\n<pre class=\"hljs\"><code>using Gadfly\nusing DataFrames\ndf=readtable(&quot;train.csv&quot;)\ndescribe(df)\n</code></pre>\n<ul>\n<li>Gadfly is a popular Julia package to create the graph, equivalent to python matplotlib</li>\n<li>DataFrames is useful package to read and store tabular data., equivalent to python panda</li>\n</ul>\n<pre class=\"hljs\"><code>typeof(df)\ndf[1,:]\ndf[:Name]\n</code></pre>\n<ul>\n<li>I will use dump(df) though :)</li>\n</ul>\n<pre class=\"hljs\"><code>pool!(df,[:Sex])\npool!(df,[:Survived])\npool!(df,[:Pclass])\n</code></pre>\n<ul>\n<li>Using pool is to make df[:Sex], df[:Survived], df[:Pclass] to become a factor, a bit similar to a dictionary.</li>\n<li>By doing this, df[:Sex] will become DataArrays.PooledDataArray{UTF8String,UInt8,1} instead of DataArrays.DataArray{UTF8String,1}</li>\n</ul>\n<pre class=\"hljs\"><code>plot(df,x=&quot;Sex&quot;,color=&quot;Survived&quot;,Geom.histogram)\n</code></pre>\n<ul>\n<li>Generating graph, however not working in my local, seems like something is broken in Gadfly</li>\n</ul>\n<pre class=\"hljs\"><code>df[!isna(df[:Age]),:]\naverageAge=mean(df[!isna(df[:Age]),:Age])\ndf[:Age]=array(df[:Age],averageAge)\n</code></pre>\n<ul>\n<li>From the describe(df), we can see that there are 177 NAs, so it is important to replace NAs data to average age</li>\n<li>array(da::DataArray{T}, replacement::Any) is deprecated. (as the author run this long ago)</li>\n</ul>\n<pre class=\"hljs\"><code>typeof(df[:Sex])\nplot(x=df[!isna(df[:Embarked]),:Embarked],Geom.histogram)\ndf[:Embarked]=array(df[:Embarked],utf8(&quot;S&quot;))\npool!(df,[:Embarked])\ntypeof(df[:Embarked])\n</code></pre>\n<ul>\n<li>Due to NAs of Embarked, one of the options is to replace NAs with the most occurence of Embarked data, based on the plot above</li>\n</ul>\n<pre class=\"hljs\"><code>newdata=df[:,[:Pclass,:Age,:Sex,:SibSp,:Parch,:Fare,:Embarked]]\ndescribe(newdata)\n</code></pre>\n<ul>\n<li>The author decided to make a prediction based on the column above: Pclass, Age, Sex, SibSp, Parch, Fare, Embarked.</li>\n</ul>\n<pre class=\"hljs\"><code>using DecisionTree\nxTrain=newdata\nyTrain=df[:Survived]\nyTrain=array(yTrain)\naccuracy = nfoldCV_forest(yTrain, xTrain, 5, 20, 4, 0.7)\n</code></pre>\n<ul>\n<li>DecisionTree package is similar to python sklearn.ensemble.RandomForestClassifier</li>\n<li>Testing in my local, nfoldCV_forest has no method matching nfoldCV_forest, probably due to upgraded version of dataframe</li>\n</ul>\n","postedAt":"31 Oct, 2015","metaDescription":"Recently Julia is on the trend, due to its purpose of becoming an easy-to-use scripting language, while giving near to C performance speed. I always see it as combination of Python + R + C, while some might think it as Python + Matlab + C\n"}