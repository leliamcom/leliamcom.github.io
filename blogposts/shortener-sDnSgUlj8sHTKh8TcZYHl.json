{"slug":"saltstack-vagrant-part-1-@sDnSgUlj8sHTKh8TcZYHl","title":"SaltStack Vagrant Part 1","description":"<ul>\n<li>SaltStack software orchestrates the build and ongoing management of any modern infrastructure.</li>\n<li>SaltStack is also the most scalable and flexible configuration management software for event-driven automation of CloudOps, ITOps and DevOps.</li>\n<li>SaltStack is one of the top configuration management framework among Chef, Puppet, Ansible and SaltStack.</li>\n</ul>\n","banner":"/assets/2016011600.png","author":{"avatar":"/assets/32x32_avatar.jpg","name":"Liam"},"data":"<h2>What is SaltStack</h2>\n<ul>\n<li>SaltStack software orchestrates the build and ongoing management of any modern infrastructure.</li>\n<li>SaltStack is also the most scalable and flexible configuration management software for event-driven automation of CloudOps, ITOps and DevOps.</li>\n<li>SaltStack is one of the top configuration management framework among Chef, Puppet, Ansible and SaltStack.</li>\n</ul>\n<h2>Why SaltStack with Vagrant</h2>\n<ul>\n<li>Salt execution routines can be written as plain Python modules. (I am the Python guy)</li>\n<li>SaltStack script for Vagrant will be mostly same for the cloud server\n<ul>\n<li>Achievement <code>development server == production server</code> Unlocked</li>\n</ul>\n</li>\n</ul>\n<h2>Vagrant Folder Structure</h2>\n<pre class=\"hljs\"><code>- salt/\n  - root/\n    - top.sls\n    - webserver.sls\n  - minion\n- Vagrantfile\n</code></pre>\n<h2>Vagrantfile Setup</h2>\n<pre class=\"hljs\"><code>Vagrant.configure(&quot;2&quot;) do |config|\n\n    # load up the box for centos 6.6\n    # This will take long to download the os, hold up there\n    # Or go for a coffee\n        config.vm.box = &quot;CentOS_7_x64&quot;\n    ## For masterless, mount your salt file root\n    config.vm.synced_folder &quot;salt/root/&quot;, &quot;/srv/salt/&quot;\n    config.vm.network &quot;private_network&quot;, ip: &quot;10.0.0.201&quot;\n\n    ## Use all the defaults:\n    config.vm.provision :salt do |salt|\n        salt.bootstrap_options = &quot;-P -c /tmp&quot; # to salve minion_config not copied issue\n        salt.masterless = true\n        salt.minion_config = &quot;salt/minion&quot;\n        salt.run_highstate = true\n\n    end\nend\n</code></pre>\n<h2>top.sls</h2>\n<pre class=\"hljs\"><code>base:\n  '*':\n    - webserver\n</code></pre>\n<h2>webserver.sls</h2>\n<pre class=\"hljs\"><code>httpd:               # ID declaration\n  pkg:                # state declaration\n    - installed       # function declaration\n  service.running:\n    - enable: True\n    - require:\n        - pkg: httpd\n</code></pre>\n<h2>minion</h2>\n<pre class=\"hljs\"><code>file_client: local\n</code></pre>\n<h2>Ending</h2>\n<p>Run <code>vagrant up</code> you should get a CentOS_7_x64 box with httpd server installed!</p>\n<p>By the end of this article, you should know the basic of how salt work.</p>\n","postedAt":"16 Jan, 2016","metaDescription":"\nSaltStack software orchestrates the build and ongoing management of any modern infrastructure.\nSaltStack is also the most scalable and flexible configuration management software for event-driven automation of CloudOps, ITOps and DevOps.\nSaltStack is one of the top configuration management framework among Chef, Puppet, Ansible and SaltStack.\n"}