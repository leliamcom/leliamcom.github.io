{"slug":"make-rest-api-to-partial-response-just-like-graphql-@RyL6nWufIxFXIdNWRdAwN","title":"Make REST api to partial response, just like GraphQL","description":"<p>The story begins in one day, I want to make NodeJS API endpoints like</p>\n<p><code>GET /api/blogposts?fields=author{name,avatar},title,detail</code></p>\n<p>and it should return me</p>\n<pre class=\"hljs\"><code>[{\n    <span class=\"hljs-string\">\"author\"</span>: {\n        <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"Liam Ng\"</span>,\n        <span class=\"hljs-string\">\"avatar\"</span>: <span class=\"hljs-string\">\"https://someurl\"</span>,\n    },\n    <span class=\"hljs-string\">\"title\"</span>: <span class=\"hljs-string\">\"blogpost title\"</span>,\n    <span class=\"hljs-string\">\"detail\"</span>: <span class=\"hljs-string\">\"blogpost detail\"</span>\n}]\n</code></pre>\n","banner":"/assets/2018103000.png","author":{"avatar":"/assets/32x32_avatar.jpg","name":"Liam"},"data":"<p>The story began in one day, I want to make NodeJS API endpoints like</p>\n<p><code>GET /api/blogposts?fields=author{name,avatar},title,detail</code></p>\n<p>and it should return me</p>\n<pre class=\"hljs\"><code>[{\n    <span class=\"hljs-string\">\"author\"</span>: {\n        <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"Liam Ng\"</span>,\n        <span class=\"hljs-string\">\"avatar\"</span>: <span class=\"hljs-string\">\"https://someurl\"</span>,\n    },\n    <span class=\"hljs-string\">\"title\"</span>: <span class=\"hljs-string\">\"blogpost title\"</span>,\n    <span class=\"hljs-string\">\"detail\"</span>: <span class=\"hljs-string\">\"blogpost detail\"</span>\n}]\n</code></pre>\n<p>When using GraphQL, partial response is a build in tool. However sometimes REST is a more suitable use case.</p>\n<p>Searching the web, I do find some libraries that do similar things however the feature is somewhat limited. Developers should not be in situation that</p>\n<ol>\n<li>want to implement partial response</li>\n<li>not so supported in REST</li>\n<li>use GraphQL</li>\n</ol>\n<p>Instead, REST should be able to achieve it as easily, with a library.</p>\n<h2>Things to acknowledge</h2>\n<ul>\n<li>Graphql still provide you a better way to do concurrent GET request (though the code might get complicated on retry on partial error)</li>\n<li>It should be build with somethings like swagger to let user knows available fields (it do comes with handy function to return response schema in OpenAPI 3 format)</li>\n</ul>\n<h2>Introduce partial-responsify</h2>\n<p>tl;dr: you can find the code at <a href=\"https://github.com/nghenglim/partial-responsify\">github</a></p>\n<p>Using it should be simple</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { PartialResponsify, ResponseFormat } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"partial-responsify\"</span>;\n\n<span class=\"hljs-comment\">// ideally should be inside DI</span>\n<span class=\"hljs-keyword\">const</span> pr = <span class=\"hljs-keyword\">new</span> PartialResponsify();\n\n<span class=\"hljs-comment\">// it is normally inside ctx.query for Koa</span>\n<span class=\"hljs-comment\">// default don't support whitespace or - or _</span>\n<span class=\"hljs-comment\">// (normally should be camelcase?)</span>\n<span class=\"hljs-keyword\">const</span> fields = <span class=\"hljs-string\">\"name,coords,author{name{first}}\"</span>;\n<span class=\"hljs-keyword\">const</span> responseFormat: ResponseFormat = {\n    <span class=\"hljs-attr\">fields</span>: {\n        <span class=\"hljs-attr\">author</span>: {\n            <span class=\"hljs-attr\">fields</span>: {\n                <span class=\"hljs-attr\">name</span>: {\n                    <span class=\"hljs-attr\">fields</span>: {\n                        <span class=\"hljs-attr\">first</span>: {\n                            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"string\"</span>,\n                        },\n                        <span class=\"hljs-attr\">last</span>: {\n                            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"string\"</span>,\n                        },\n                    },\n                    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"object\"</span>,\n                },\n            },\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"object\"</span>,\n        },\n        <span class=\"hljs-attr\">coords</span>: {\n            <span class=\"hljs-attr\">items</span>: {\n                <span class=\"hljs-attr\">items</span>: {\n                    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"number\"</span>,\n                },\n                <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"array\"</span>,\n            },\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"array\"</span>,\n        },\n        <span class=\"hljs-attr\">license</span>: {\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"string\"</span>,\n        },\n        <span class=\"hljs-attr\">name</span>: {\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"string\"</span>,\n        },\n    },\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"object\"</span>,\n};\n\n<span class=\"hljs-comment\">// you can use this fieldsToParse to track the fields usage</span>\n<span class=\"hljs-keyword\">const</span> fieldsToParse = pr.parseFields(fields, responseFormat);\n<span class=\"hljs-built_in\">console</span>.log(fieldsToParse);\n\n<span class=\"hljs-comment\">// and then you perform some logic and got the result</span>\n<span class=\"hljs-keyword\">const</span> result = {\n    <span class=\"hljs-attr\">author</span>: {\n        <span class=\"hljs-attr\">name</span>: {\n            <span class=\"hljs-attr\">first</span>: <span class=\"hljs-string\">\"Liam\"</span>,\n            <span class=\"hljs-attr\">last</span>: <span class=\"hljs-string\">\"Ng\"</span>,\n        },\n        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"https://www.leliam.com\"</span>,\n    },\n    <span class=\"hljs-attr\">coords</span>: [[<span class=\"hljs-number\">13.37</span>, <span class=\"hljs-number\">1.337</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>]],\n    <span class=\"hljs-attr\">license</span>: <span class=\"hljs-string\">\"MIT\"</span>,\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"partial-responsify\"</span>,\n};\n<span class=\"hljs-keyword\">const</span> res = pr.parseResult&lt;any&gt;(fieldsToParse, responseFormat, result);\n<span class=\"hljs-built_in\">console</span>.log(res);\n<span class=\"hljs-comment\">/*\nthe result should be:\n[ [ [], 'name' ],\n  [ [], 'coords' ],\n  [ [ 'author', 'name' ], 'first' ] ]\n{ author: { name: { first: 'Liam' } },\n  coords: [ [ 13.37, 1.337 ], [ 0, 0 ] ],\n  name: 'partial-responsify' }\n*/</span>\n</code></pre>\n<p>Since we use <code>responseFormat</code> to validate the response, it will be great if there is a function to generate swagger response schema based on it!</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { ResponseFormat, SchemaGenerator } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"partial-responsify\"</span>;\n<span class=\"hljs-keyword\">const</span> sgen = <span class=\"hljs-keyword\">new</span> SchemaGenerator();\n<span class=\"hljs-keyword\">const</span> responseFormat: ResponseFormat = {\n    <span class=\"hljs-attr\">items</span>: {\n        <span class=\"hljs-attr\">fields</span>: {\n            <span class=\"hljs-attr\">a</span>: {\n                <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"number\"</span>,\n            },\n            <span class=\"hljs-attr\">b</span>: {\n                <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"string\"</span>,\n            },\n            <span class=\"hljs-attr\">c</span>: {\n                <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"integer\"</span>,\n            },\n            <span class=\"hljs-attr\">d</span>: {\n                <span class=\"hljs-attr\">format</span>: <span class=\"hljs-string\">\"uuid\"</span>,\n                <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"string\"</span>,\n            },\n            <span class=\"hljs-attr\">e</span>: {\n                <span class=\"hljs-attr\">fields</span>: {\n                    <span class=\"hljs-attr\">a</span>: {\n                        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"number\"</span>,\n                    },\n                },\n                <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"object\"</span>,\n            },\n        },\n        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"object\"</span>,\n    },\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"array\"</span>,\n};\n<span class=\"hljs-keyword\">const</span> result = sgen.generate(responseFormat);\n<span class=\"hljs-built_in\">console</span>.log(result);\n<span class=\"hljs-comment\">/*\n{\n    items: {\n        properties: {\n            a: {\n                type: \"number\",\n            },\n            b: {\n                type: \"string\",\n            },\n            c: {\n                type: \"integer\",\n            },\n            d: {\n                format: \"uuid\",\n                type: \"string\",\n            },\n            e: {\n                properties: {\n                    a: {\n                        type: \"number\",\n                    },\n                },\n                type: \"object\",\n            },\n        },\n        type: \"object\",\n    },\n    type: \"array\",\n}\n*/</span>\n</code></pre>\n<h2>To make it better</h2>\n<p>It will require a library to auto generate Swagger JSON file to make it shine. It is not hard to make the library however will be large amount of works to support every edge case.</p>\n","postedAt":"30 Oct, 2018","metaDescription":"The story begins in one day, I want to make NodeJS API endpoints like\nGET /api/blogposts?fields=author{name,avatar},title,detail\nand it should return me\n[{\n    \"author\": {\n        \"name\": \"Liam Ng\",\n        \"avatar\": \"https://someurl\",\n    },\n    \"title\": \"blogpost title\",\n    \"detail\": \"blogpost detail\"\n}]\n"}