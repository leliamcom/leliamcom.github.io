{"slug":"tensorFlow-udacity-1-notmnist-part-6-@1YK25RIKjKKpFSkXBAA9b7","title":"TensorFlow Udacity 1_notmnist - Part 6","description":"<p>Basically 1_notmnist is to learn how to display data in Jupyter Notebook. Besides, it also let us know on sklearn - a python machine library - so that we can then compare with TensorFlow. This is the exact <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/udacity/1_notmnist.ipynb\">ipynb file at Tensorflow Github Repo</a>.</p>\n","banner":"/assets/2016031900.png","author":{"avatar":"/assets/32x32_avatar.jpg","name":"Liam"},"data":"<h2>Summary of 1_notmnist</h2>\n<p>Basically 1_notmnist is to learn how to display data in Jupyter Notebook. Besides, it also let us know on sklearn - a python machine library - so that we can then compare with TensorFlow. This is the exact <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/udacity/1_notmnist.ipynb\">ipynb file at Tensorflow Github Repo</a>.</p>\n<h2>Notice</h2>\n<p>This is as a form of sharing and discuss on better way to solve 1_notmnist problem. Do not copy and paste directly as it does not help on improving yourself + the answer is not optimized.</p>\n<p>The entire series of TensorFlow Udacity can be found at <a href=\"https://www.leliam.com/tag/tensorflow-udacity\">tensorflow-udacity tag</a></p>\n<h2>Solving Problem 6</h2>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">reshape</span><span class=\"hljs-params\">(a)</span>:</span>\n    <span class=\"hljs-keyword\">return</span> a.reshape(a.shape[<span class=\"hljs-number\">0</span>],a.shape[<span class=\"hljs-number\">1</span>]*a.shape[<span class=\"hljs-number\">2</span>])\nt = pickle.load(open(<span class=\"hljs-string\">\"notMNIST.pickle\"</span>, <span class=\"hljs-string\">\"r\"</span>))\ny = t[<span class=\"hljs-string\">'train_labels'</span>]\nX = reshape(t[<span class=\"hljs-string\">'train_dataset'</span>]) <span class=\"hljs-comment\"># reshape it to 2d array</span>\n<span class=\"hljs-keyword\">del</span>(t) <span class=\"hljs-comment\"># this should free up more memory spaces</span>\n<span class=\"hljs-comment\"># choose form 0:10000 because not enough memory for the docker</span>\n<span class=\"hljs-comment\"># probably a way to do batch learning with scikit-learn</span>\n<span class=\"hljs-comment\"># http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html</span>\n<span class=\"hljs-comment\"># http://scikit-learn.org/stable/auto_examples/classification/plot_classification_probability.html</span>\nC = <span class=\"hljs-number\">1.0</span>\nclassifier = LogisticRegression(C=C, penalty=<span class=\"hljs-string\">'l1'</span>)\nclassifier.fit(X[<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">10000</span>], y[<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">10000</span>])\ny_pred = classifier.predict(X)\nclassif_rate = np.mean(y_pred.ravel() == y.ravel()) * <span class=\"hljs-number\">100</span>\nprint(<span class=\"hljs-string\">\"classif_rate for %f \"</span> % (classif_rate))\n<span class=\"hljs-comment\"># we now see how it is predicted using sample 10001 to 20000, which is not used for training</span>\n<span class=\"hljs-comment\"># actually should calculate the accuracy in percentage.</span>\nprint(y[<span class=\"hljs-number\">10001</span>:<span class=\"hljs-number\">20000</span>])\nprint(y_pred[<span class=\"hljs-number\">10001</span>:<span class=\"hljs-number\">20000</span>])\n</code></pre>\n<p><img src=\"/assets/2016042300.png\" alt=\"png\" loading=\"lazy\"></p>\n<h2>Comment</h2>\n<p>This time we have learnt how to use scikit-learn to do LogisticRegression for notMNIST. As we can see, the classification accuracy is still not bad.</p>\n<p>I will expect that tensorflow is either faster and more structured compared to this solution (or google probably will not use this as an example)</p>\n","postedAt":"23 Apr, 2016","metaDescription":"Basically 1_notmnist is to learn how to display data in Jupyter Notebook. Besides, it also let us know on sklearn - a python machine library - so that we can then compare with TensorFlow. This is the exact ipynb file at Tensorflow Github Repo.\n"}